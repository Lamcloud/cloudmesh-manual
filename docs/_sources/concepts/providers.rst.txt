Cloudmesh Providers
===================

Cloudmesh is based on the concept of providers that make it possible to develop
API interfaces to different services independently while inheriting the
functionality form a comman abstract class.


Instalation in a single directory
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Let us demonstarte this for a compute provider. For convenience to document
this, we assume that the diectories are stored in ~/cm. However they can be
stored in any directory. We have the following structure::


    ~/cm/
        cloudmesh/compute
            ComputeABC.py
            Provider.py
            command/vm.py
            command/image.py
            command/flavor.py
            aws/Provider.py
            azure/Provider.py
            ...

Here the ABC class determines which methods must be implemented by the
provider. The provider in cloudmesh containes a service name in the init
function. This name is tahn used to read configuration parameters including a
cm.kind that identifies which Provider sis read upon loading it by name.


Example: The yaml file ~/.cloudmesh/cludmesh.yaml contains the entry::

    cloudmesh:
      compute: # currently called cloud
        mycloud:
          cm:
            name: maycloud
            kind: aws
          credentials:
            ...
          defaults:
            size: ...
            image: ...

Now when we call

    provider = cloudmesh.compute.Provider(service="mycloud")

The Provider will load in the provider from the aws directory, as the cm.kind
is specified as `aws`. Thus the main provider delegates the tasks to interface
with teh particular cloud type via the definitions coming from the cloudmesh
yaml file. This makes it possible to easily create multiple interface sto
different cloud service providers while managing a uniform interface via the
ABC class. All providers in this hierarchie must innherit from the ABC class.

Instalation in a multiple directories
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In addition to this structure which is prefered whan all providers are managed
in one source directory we also use a second pattern in which we manage each
provider in its own package.

here the directory structure looks as follows::

    ~/cm/

        cloudmesh-compute/  #curertly named cloudmes-cloud
            cloudmesh/compute
                ComputeABC.py
                Provider.py
                command/vm.py
                command/image.py
                command/flavor.py

        cloudmesh-aws/
            cloudmesh/
                aws/Provider.py

        cloudmesh-azure/
            cloudmesh/
                azure/Provider.py

In this case we have includes in the compute provider imports for the providers
defined in their own reporsitories. As we use the shared namespace they can be
accessed from the main provider easily. THis allows us to simply add the
provider with a simple pip install::

    cd ~/cm/cloudmesh-compute/
    pip install .
    cd ~/cm/cloudmesh-aws/
    pip install .
    cd ~/cm/cloudmesh-azure/
    pip install .

Now the aws and azure providers are accessible in cloudmesh and if a command is
provided they can bae accessed from there.

Command Usage
~~~~~~~~~~~~~

You will have noticed that we also included some commands in the code. THease
are commands that make use of the main provider and expose the fucntionality of
the provider conveniently to the users in the cmd5 command line and
command shell tool.
